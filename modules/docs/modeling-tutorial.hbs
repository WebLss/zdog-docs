<h2>Modeling tutorial</h2>

<div class="example">
  <div class="example__code">
    <p>Modeling with Zdog is done by positioning and combining shapes to make more complex objects. This tutorial will walk through modeling this high-struttin' dude.</p>
  </div>
  <div class="example__demo">
    <canvas data-js="modelComplete" class="illo" width="240" height="240"></canvas>
  </div>
</div>

{{! --------------------------------------------- }}

<h3>Head &amp; face</h3>

<p>Our initial setup picks up from the <a href="getting-started">Getting started demo</a>. We have an <a href="api#illustration"><code>Illustration</code></a>, a model with a single <a href="shapes#shape"><code>Shape</code></a>, and an animation loop.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const illo = new Zdog.Illustration({
      element: elem,
      zoom: 10,
      dragRotate: true,
    });

    // ---- model ---- //

    const head = new Zdog.Shape({
      addTo: illo,
      stroke: 12,
      color: gold,
    });

    // -- animate --- //

    function animate() {
      illo.updateRenderGraph();
      requestAnimationFrame( animate );
    }
    animate();
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="1" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>The head shape is rendered as a flat-colored sphere with <a href="shapes#shape"><code>Shape</code></a>. The <code>Shape</code> class can be defined to render any shape — lines, curves, polygons — via its <a href="shapes#shape-path"><code>path</code> property</a>. As <code>head</code> does not have <code>path</code> set, its path defaults to a single point. That point, with <a href="#concepts-stroke-volume"><code>stroke</code> volume</a>, renders a flat-colored sphere. In other words, a circle.</p>

<p>Next we add the eye <a href="shapes#ellipse"><code>Ellipse</code></a> as a <a href="#concepts-child-shapes">child shape</a> to <code>head</code> with <a href="api#anchor-addto"><code>addTo: head</code></a>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const eye = new Zdog.Ellipse({
      addTo: head,
      diameter: 2,
      quarters: 2, // semi-circle
      translate: { x: -2, y: 1, z: 4.5 },
      // rotate semi-circle to point up
      rotate: { z: -TAU/4 },
      color: eggplant,
      stroke: 0.5,
      // hide when front-side is facing back
      backface: false,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="2" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>For the eye on the right, we can <a href="#concepts-copying"><code>.copy()</code></a> the right. The original options are copied over and then can be overwritten with new options, in this case changing <code>translate</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // eye on left
    const eye = new Zdog.Ellipse({
      addTo: head,
      diameter: 2,
      quarters: 2,
      translate: { x: -2, y: 1, z: 4.5 },
      // ...
    });
    // eye on right
    eye.copy({
      translate: { x: 2, y: 1, z: 4.5 },
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="3" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Compare the <code>translate</code> <a href="#concepts-vector-objects">vector <i>Object</i>s</a> for the eyes.</p>

``` js
// eye on left
translate: { x: -2, y: 1, z: 4.5 }
// eye on right
translate: { x: 2, y: 1, z: 4.5 }
```

<p>The only difference is the <code>x</code> coordinate. But all three <code>x</code>, <code>y</code>, <code>z</code> coordinates need to be set. Setting just <code>translate: { x: 2 }</code> would yield <code>{ x: 2, y: 0, z: 0 }</code> which is not what we want.</p>

<p>The smile is made with a similar semi-circle <a href="shapes#ellipse"><code>Ellipse</code></a>. Its path is closed with <a href="api#shape-closed"><code>closed: true</code></a>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // smile
    new Zdog.Ellipse({
      addTo: head,
      diameter: 3,
      quarters: 2,
      translate: { y: 2.5, z: 4.5 },
      rotate: { z: TAU/4 },
      closed: true,
      color: '#FED',
      stroke: 0.5,
      fill: true,
      backface: false,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="4" class="illo" width="240" height="240"></canvas>
  </div>
</div>

{{! --------------------------------------------- }}

<h3>Body core</h3>

<p>Let's give this floating head a body starting with the hips.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // illo zoom: 5
    // remove head for now

    const hips = new Zdog.Shape({
      addTo: illo,
      path: [ { x: -3 }, { x: 3 } ],
      stroke: 4,
      color: '#636',
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelBodyCore" data-step="1" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p><code>hips</code> is just a <a href="shapes#shape-line">horizontal line <code>Shape</code></a>. Unlike <code>head</code>, <code>hips</code> has its <a href="shapes#shape-path"><code>path</code></a> set. The <code>path</code> is set to an <i>Array</i> with two <a href="#concepts-vector-objects">vector <i>Object</i>s</a>. So this path reads: start at <code>x: -3</code>, draw a line to <code>x: 3</code>.</p>

<p>We start with the hips because the model's upper body pivots around the hips. By adding the upper body shapes to hips, we can rotate the hips and shapes will rotate with it.</p>

<p>Let's work our way up and add the chest next.</p>


<div class="example">
  <div class="example__code">
    ``` js
    const chest = new Zdog.Shape({
      addTo: hips,
      path: [ { x: -1.5 }, { x: 1.5 } ],
      // position right above hips
      // ( hips.stroke + chest.stroke ) / 2
      translate: { y: -6.5 },
      stroke: 9,
      color: '#C25',
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelBodyCore" data-step="2"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p><code>chest</code> is another <a href="shapes#shape-line">horizontal line <code>Shape</code></a>. <a href="#concepts-stroke-volume">Ample stroke</a> gives makes this little line a big barrelled torso.</p>

<p>The head can now go back on top.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const head = new Zdog.Shape({
      addTo: chest,
      stroke: 12,
      // position above chest
      translate: { y: -9.5 },
      color: '#EA0',
    });

    // other face shapes...
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelBodyCore" data-step="3"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Now we can rotate <code>illo</code> and <code>hips</code> to see a preview of the final product.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const illo = new Zdog.Illustration({
      zoom: 5,
      // rotate for three-quarters view
      rotate: { y: -Zdog.TAU/8 },
      // ...
    });

    const hips = new Zdog.Shape({
      addTo: illo,
      // tilt back 45°
      rotate: { x: Zdog.TAU/8 },
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelBodyCore" data-step="4"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>So chill.</p>

{{! --------------------------------------------- }}

<h3>Legs</h3>

<p>Let's get back upright and now work on the lower half.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const hipX = 3;

    const hips = new Zdog.Shape({
      path: [ { x: -hipX }, { x: hipX } ],
      // ...
    });

    const leg = new Zdog.Shape({
      addTo: hips,
      path: [ { y: 0 }, { y: 12 } ],
      translate: { x: -hipX },
      color: '#636',
      stroke: 4,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelLegs" data-step="1"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>We can render a leg with a straight line <code>Shape</code>. This line will start at the left hip. So we add the <code>leg</code> to <code>hips</code> and set its origin with <code>translate: { x: -hipX }</code>. We can use a variable <code>hipX</code> within both <code>hips.path</code> and <code>leg.translate</code> for consistency. Now we can draw the <code>path</code> starting at the origin <code>0</code> and go down, hence <code>path: [ { y: 0 }, { y: 12 } ]</code>.</p>

<p>Next, the foot.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // foot
    new Zdog.RoundedRect({
      addTo: leg,
      width: 2,
      height: 4,
      cornerRadius: 1,
      // y: past leg end, z: scootch toward front
      translate: { y: 14, z: 2 },
      color: '#C25',
      fill: true,
      stroke: 4,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelLegs" data-step="2"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>The foot is first shape we need to consider in three dimensions. The toe sticks out toward the front. We could draw a custom <code>Shape</code> that works with <code>z</code> values. But instead, a simpler approach is to rotate a basic shape into the desired orientation.</p>

<p>This simple foot is rendered with a <a href="shapes#roundedrect"><code>RoundedRect</code></a>. The corners are completely rounded with <code>cornerRadius: 1</code>, forming a flattened pill shape. The foot is added to <code>leg</code> and positioned vertically a little past the end of the leg, and along <code>z</code> toward the front so the toe sticks out farther than the heel.</p>

<p>Now let's rotate that foot.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // foot
    new Zdog.RoundedRect({
      addTo: leg,
      translate: { y: 14, z: 2 },
      // rotate 90° along x-axis
      rotate: { x: Zdog.TAU/4 }
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelLegs" data-step="3"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Perfecto. Now that one leg is in place, we can copy the leg and its foot with <a href="api#anchor-copygraph"><code>.copyGraph()</code></a>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    leg.copyGraph({
      // position on right
      translate: { x: hipX },
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelLegs" data-step="4"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

{{! --------------------------------------------- }}

<h3>Arms</h3>

<p>This fella needs some dukes for puttin' up. We'll use the same technique with the legs, this time working off the <code>chest</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    var armSize = 6;

    // left arm
    const upperArm = new Zdog.Shape({
      addTo: chest,
      path: [ { y: 0 }, { y: armSize } ],
      translate: { x: -5, y: -2 },
      color: '#636',
      stroke: 4,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelArms" data-step="1"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Whereas the leg was just one straight line from hip to foot, the arm will require two parts. The first <code>upperArm</code> shape starts from the <code>chest</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const forearm = new Zdog.Shape({
      addTo: upperArm,
      path: [ { y: 0 }, { y: armSize } ],
      translate: { y: armSize },
      color: '#EA0',
      stroke: 4,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelArms" data-step="2"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>The <code>forearm</code> connects to the <code>upperArm</code>. It starts at the end of the <code>upperArm</code> by setting <code>translate: { y: armSize }</code>, which matches  <code>upperArm</code>'s end <code>path</code> point.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // hand
    new Zdog.Shape({
      addTo: forearm,
      // connect to end of forearm
      // scootch toward front a bit
      translate: { y: armSize, z: 1 },
      stroke: 6,
      color: '#EA0',
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelArms" data-step="3"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>The hand is rendered as a single-point <code>Shape</code> like the <code>head</code>. It connects to <code>forearm</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // copy to right arm
    upperArm.copyGraph({
      translate: { x: 5, y: -2 },
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelArms" data-step="4"
      class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Whoa! All the body parts are in place.</p>

<p>Rotating the model around, you'll notice how the shapes pop-over one another — like where the <code>upperArm</code> and <code>forearm</code> overlap on the elbow. This is called <a href="extras#z-fighting">z-fighting</a>. We'll clean this up a bit as we rotate shapes away from one another. But these z-fights are innevitable with pseudo-3D engine like Zdog. Rather than fighting this effect, accept it for what it is. It's not a bug, it's what makes Zdog <em>charming</em>.</p>

{{! --------------------------------------------- }}

<h3>Rotating legs</h3>

{{! --------------------------------------------- }}

<h3>Rotating spine </h3>

{{! --------------------------------------------- }}

<h3>Rotating arms</h3>

{{! --------------------------------------------- }}

<h2>Modeling tutorial</h2>

<div class="example">
  <div class="example__code">
    <p>Modeling with Zdog is done by positioning and combining shapes to make more complex objects. This tutorial will walk through modeling this high-struttin' dude.</p>
  </div>
  <div class="example__demo">
    <canvas data-js="modelComplete" class="illo" width="240" height="240"></canvas>
  </div>
</div>

{{!
  CONCEPTS
  shapes & child shapes
  Vector objects
  stroke volume
  anchor to rotate, then translate
}}

{{! --------------------------------------------- }}

<h3>Head &amp; face</h3>

<p>Our initial setup picks up from the Getting started demo. Let's start with the head.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const illo = new Zdog.Illustration({
      canvas: elem,
      zoom: 10,
      dragRotate: true,
    });

    // ---- model ---- //

    const head = new Zdog.Shape({
      addTo: illo,
      stroke: 12,
      color: gold,
    });

    // -- animate --- //

    function animate() {
      illo.updateRenderGraph();
      requestAnimationFrame( animate );
    }
    animate();
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="1" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>The head shape is rendered as a flat-colored sphere with <code>Shape</code>. The <code>Shape</code> class can be defined to render any shape — lines, curves, polygons — via its <code>path</code> option. As <code>head</code> does not have <code>path</code> set, its path defaults to a single point. That point, combined with <code>stroke</code> renders a flat-colored sphere. In other words, a circle.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const eye = new Zdog.Ellipse({
      addTo: head,
      diameter: 2,
      quarters: 2, // semi-circle
      translate: { x: -2, y: 1, z: 4.5 },
      // rotate semi-circle to point up
      rotate: { z: -TAU/4 },
      color: eggplant,
      stroke: 0.5,
      // hide when front-side is facing back
      backface: false,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="2" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Next we add the eye as a child shape to <code>head</code> with <code>addTo: head</code>. This is imporant. Adding child shapes allows you to collect shapes together. Any <code>translate</code>, <code>rotate</code>, and <code>scale</code> that is set on a parent shape is applied to its children.</p>

<p>For the eye on the right, we can <code>.copy()</code> the right. The original options are copied over and then can be overwritten with new options, in this case changing <code>translate</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // eye on left
    const eye = new Zdog.Ellipse({
      addTo: head,
      diameter: 2,
      quarters: 2,
      translate: { x: -2, y: 1, z: 4.5 },
      // ...
    });
    // eye on right
    eye.copy({
      translate: { x: 2, y: 1, z: 4.5 },
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="3" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Compare the <code>translate</code> values for the eye shapes.</p>

``` js
// eye on left
translate: { x: -2, y: 1, z: 4.5 }
// eye on right
translate: { x: 2, y: 1, z: 4.5 }
```

<p>The only difference is the <code>x</code> coordinate. But the whole <code>x</code>, <code>y</code>, <code>z</code> coordinates need to be set. Setting just <code>translate: { x: 2 }</code> would yield <code>{ x: 2, y: 0, z: 0 }</code> which is not what we want.</p>

<p>The smile is made with a similar semi-circle <code>Ellipse</code>. Its path is closed with <code>closed: true</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // smile
    new Zdog.Ellipse({
      addTo: head,
      diameter: 3,
      quarters: 2,
      translate: { y: 2.5, z: 4.5 },
      rotate: { z: TAU/4 },
      closed: true,
      color: '#FED',
      stroke: 0.5,
      fill: true,
      backface: false,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelHead" data-step="4" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<h2>Chest &amp; hips</h2>

<p>Let's give this floating head a body starting with a chest.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // illo zoom: 7.5

    const chest = new Zdog.Shape({
      addTo: illo,
      path: [ { x: -1.5 }, { x: 1.5 } ],
      color: garnet,
      stroke: 9,
    });

    const head = new Zdog.Shape({
      addTo: chest, // add head to chest
      stroke: 12,
      translate: { y: -3 },
      color: gold,
    });

    // eyes & smile...
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelChest" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p><code>chest</code> is rendered as a horizontal line with <code>Shape</code>. Unlike <code>head</code>, <code>chest</code> has its <code>path</code> set. <code>path</code> is set with an <i>Array</i>, each item in the array defines a direction for the path to take. The <code>path</code> for <code>chest</code> consists of <i>Array</i> with two Vector-like <i>Objects</i>. So this path reads: start at <code>x: -1.5</code>, draw a line to <code>x: 1.5</code>.</p>

<h3>Stroke volume</h3>

<p>Whereas polygonal 3D engines rely on meshes polygons to depict volume, Zdog shapes can show volume with <code>stroke</code>. The chest is a simple horizontal line, but with thick <code>stroke</code>, it appears as a big, round pill. <b>Utilizing <code>stroke</code> for volume is what makes Zdog special.</b> Let go of your earthly polygons and become one with the round thickness.</p>

{{! hips --------------------------------------------- }}

<p>Speaking of thickness, let's render the hips with another horizontal line.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // illo zoom: 5

    const hips = new Zdog.Shape({
      addTo: illo,
      path: [ { x: -3 }, { x: 3 } ],
      translate: { y: 2 },
      color: eggplant,
      stroke: 4,
    });

    const spine = new Zdog.Anchor({
      addTo: hips,
    });

    const chest = new Zdog.Shape({
      addTo: spine,
      translate: { y: -6.5 },
      // ...
    });

    // head...
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="modelChestHips" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>spine bend</p>
<p>legs</p>
<p>feet</p>
<p>arms</p>
<p>legs rotate</p>
<p>spine rotate</p>
<p>arms rotate</p>

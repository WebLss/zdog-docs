{{! --------------------------------------------- }}

<h2>Concepts</h2>

{{! --------------------------------------------- }}

<h3>Child shapes</h3>

<p>Zdog models are built with shapes. Shapes can be positioned with <code>translate</code>. Their positions are <em>relative</em>. For instance, when added to an <code>Illustration</code>, shapes are positioned relative to the <code>Illustration</code>'s origin.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const zCircle = new Zdog.Ellipse({
      addTo: illo,
      translate: { z: 40 }, // z +40 from illo
      // ...
    });

    const xRect = new Zdog.Rect({
      addTo: illo,
      translate: { x: 40 }, // x +40 from illo
      // ...
    });

    const yTri = new Zdog.Polygon({
      addTo: illo,
      translate: { y: -60 }, // y -60 from illo
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="childShapes" data-step="1" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Shapes can be added as children to other shapes. A child shape is positioned relative to its parent.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const zCircle = new Zdog.Ellipse({
      addTo: illo,
      translate: { z: 40 }, // z +40 from illo
      // ...
    });

    const xRect = new Zdog.Rect({
      addTo: zCircle,
      translate: { x: 40 }, // x +40 from zCircle
      // ...
    });

    const yTri = new Zdog.Polygon({
      addTo: xRect,
      translate: { y: -60 }, // y -60 from xRect
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="childShapes" data-step="2" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p><code>translate</code> is a transformation — as is <code>rotate</code> and <code>scale</code>. Child shapes inherit the transformations of their parents (<i>wow, that is deep</i>).</p>

<div class="example">
  <div class="example__code">
    ``` js
    const zCircle = new Zdog.Ellipse({
      addTo: illo,
      scale: 1.5, // scale 150%
      translate: { z: 40 },
      rotate: { z: -Zdog.TAU/8 }, // rotate 45° CCW
      // ...
    });

    const xRect = new Zdog.Rect({
      addTo: zCircle,
      translate: { x: 40 },
      rotate: { x: Zdog.TAU/8 }, // rotate back
      // ...
    });

    const yTri = new Zdog.Polygon({
      addTo: xRect,
      translate: { y: -60 },
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="childShapes" data-step="3" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p>Using child shapes and their additive transformations enables you to build complex models.</p>

{{! --------------------------------------------- }}

<h3>Anchors</h3>

<p>An <code>Anchor</code> is an invisible shape. Use an <code>Anchor</code> for transformations without rendering a shape.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const zAnchor = new Zdog.Anchor({
      addTo: illo,
      scale: 1.5,
      translate: { z: 40 },
      rotate: { z: -Zdog.TAU/8 },
    });

    const xAnchor = new Zdog.Anchor({
      addTo: zAnchor,
      translate: { x: 40 },
      rotate: { x: Zdog.TAU/8 },
    });

    const yTri = new Zdog.Polygon({
      addTo: xAnchor,
      translate: { y: -60 },
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="childShapes" data-step="4" class="illo" width="240" height="240"></canvas>
  </div>
</div>

{{! --------------------------------------------- }}

<h3>Vector Objects</h3>

<p>Properties like <code>translate</code>, <code>rotation</code>, and <code>scale</code> are <code>Vector</code>s. A <code>Vector</code> can be set with a vector <i>Object</i>.</p>

{{> vector-objects }}

``` js
translate: { x: 1, z: 2 }, // => { x: 1, y: 0, z: 2 }
translate: { y: 3 },       // => { x: 0, y: 3, z: 0 }
translate: {}              // => { x: 0, y: 0, z: 0 }
```

{{! --------------------------------------------- }}

<h3>Copying</h3>

<p>Copy items with <code>.copy()</code>.</p>

{{> copy-example }}

<p>Copy items with their children with <code>.copyGraph()</code>.</p>

{{> copy-graph-example }}

{{! --------------------------------------------- }}

<h3>Stroke volume</h3>

<p>Whereas polygonal 3D engines rely on meshes polygons to depict volume, Zdog shapes can show volume with <code>stroke</code>.

<p>Look at this tasty burger. The patty and cheese slice are just simple circles. The sesame seeds are just lines. But with thick <code>stroke</code> they appear as plump round discs and pills.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // cheese
    new Zdog.Ellipse({
      diameter: 84,
      stroke: 10,
      // ...
    });
    // patty
    new Zdog.Ellipse({
      diameter: 72,
      stroke: 28,
      // ...
    });
    // seed
    new Zdog.Shape({
      path: [ { y: -3 }, { y: 3 } ],
      stroke: 8,
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="tastyBurger" class="illo" width="240" height="240"></canvas>
  </div>
</div>

<p><b>Using <code>stroke</code> for volume is what makes Zdog special.</b> Let go of your earthly polygons and become one with the round thickness.</p>

{{! --------------------------------------------- }}

<h3>Groups</h3>

<p>Use a <code>Group</code> to control rendering order. Shapes will be rendered in the order they are added to the <code>Group</code>. <code>Group</code>s are useful for positioning shapes within other shapes, like windows in walls or pupils in eyes.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // always render wall then door then window
    var wallGroup = new Zdog.Group({
      addTo: illo,
    });

    // wall
    new Zdog.Rect({
      addTo: wallGroup,
      width: 140,
      height: 100,
      // ...
    });
    // door
    new Zdog.Rect({
      addTo: wallGroup,
      width: 30,
      height: 65,
      // ...
    });
    // window
    new Zdog.Ellipse({
      addTo: wallGroup,
      diameter: 30,
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="groupWall" class="illo" width="240" height="240"></canvas>
  </div>
</div>

{{! --------------------------------------------- }}

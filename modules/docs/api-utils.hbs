<h2>Utilities</h2>

<p>Zdog includes a couple constants and methods to help with math &amp; animation.</p>

{{! --------------------------------------------- }}

<h3>TAU</h3>

``` js
Zdog.TAU // => 6.28318
```

<p>A full rotation in radians. <code>Math.PI * 2</code>. <code>TAU</code> is more user-friendly than <code>PI</code> as <code>TAU</code> maps directly to a full rotation.</p>

``` js
rotate: { y: Zdog.TAU/4 } // /4 = quarter turn
rotate: { y: Zdog.TAU/2 } // /2 = half turn
rotate: { y: Zdog.TAU*3 } // *3 = 3 full turns
```

{{! --------------------------------------------- }}

<h3>easeInOut()</h3>

<p>Apply an in-out easing. Useful for animation.</p>

``` js
let easeAlpha = Zdog.easeInOut( alpha, power );
```

<ul>
  <li><code>alpha</code> - a <i>Number</i> <code>0</code> to <code>1</code>.</li>
  <li><code>power</code> - the exponential power of the easing curve. Default <code>2</code>.</li>
</ul>

<div class="example">
  <div class="example__code">
    ``` js
    var timer = 0;

    function animate() {
      // apply easing to rotation
      var alpha = Zdog.easeInOut( timer % 1, 3 );
      illo.rotate.y = alpha * Zdog.TAU;
      timer += 1/150; // complete cycle every 150 frames

      illo.updateRenderGraph();
      requestAnimationFrame( animate );
    }
    animate();
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo illo--no-drag" data-js="utilsEaseInOut"
      width="240" height="240"></canvas>
  </div>
</div>

{{! --------------------------------------------- }}

<h3>extend()</h3>

``` js
Zdog.extend( a, b )
```

<p>Sets the properties of <i>Object</i> <code>b</code> on to <i>Object</i> <code>a</code>.</p>

``` js
const optionsA = { stroke: 4, fill: true };
const optionsB = { color: '#EA0', fill: false };

Zdog.extend( optionsA, optionsB );
// optionsA = { stroke: 4, color: '#EA0', fill: false }
```

{{! --------------------------------------------- }}

<h3>lerp()</h3>

``` js
Zdog.lerp( a, b, alpha )
```

<p>Linear interpolation between values <code>a</code> and <code>b</code> given a percent decimal <code>alpha</code>.</p>

``` js
// 75% of the way between 20 and 40
Zdog.lerp( 20, 40, 0.75 );
// => 35
```

{{! --------------------------------------------- }}

<h3>modulo()</h3>

``` js
Zdog.modulo( a, b )
```

<p>Returns <a href="https://en.wikipedia.org/wiki/Modular_arithmetic">modulo</a> or "wrap around" value of <code>a</code> given <code>b</code>.</p>

``` js
// It's 8AM now. What time will it be 18 hours from now?
let later = Zdog.modulo( 8 + 18, 24 )
// => 2, 2AM

// It's 8AM now. What time was it 15 hours ago?
let earlier = Zdog.modulo( 8 - 15, 24 )
// => 17, uh, I'm American
earlier = Zdog.modulo( earlier, 12 )
// => 5PM

// Why can't I use % operator?
earlier = ( 8 - 15 ) % 24;
// => -7, oh no. % returns remainders, which can be negative
```


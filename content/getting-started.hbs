---
title: Getting started
---

<p>This page will walk you through how to design, display, and animate a basic 3D model with Zdog.</p>

{{! --------------------------------------------- }}

<h2>HTML</h2>

{{! --------------------------------------------- }}

<p>Zdog is rendered on a <code>&lt;canvas></code> or <code>&lt;svg></code> element. Set <code>width</code> and <code>height</code> attributes to set the size.</p>

``` html
<canvas class="zdog-canvas" width="240" height="240"></canvas>
```

<p>Add the Zdog JavaScript file to your page. For quick demos, add the CDN URL. Finally add a <code>&lt;script></code> for your demo&rsquo;s JS file.</p>

``` html
<script src="https://unpkg.com/zdog@1/dist/zdog.dist.min.js"></script>
<script src="zdog-demo.js"></script>
```

{{! --------------------------------------------- }}

<h2>Initial static demo</h2>

<p>Let&rsquo;s jump in with a basic non-animated demo.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // zdog-demo.js

    // create illo
    const illo = new Zdog.Illustration({
      // set canvas with selector
      element: '.zdog-canvas',
    });

    // add circle
    new Zdog.Ellipse({
      addTo: illo,
      diameter: 80,
      stroke: 20,
      color: '#636',
    });

    // update & render
    illo.updateRenderGraph();
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="starterInitial"
        class="illo illo--no-drag" width="240" height="240"></canvas>
    {{> edit-demo penSlug="RmLyyq"}}
  </div>
</div>

<p>Let&rsquo;s break it down. The Zdog API mostly consists by creating instances of <a href="api">Zdog&rsquo;s classes</a>.</p>

<p><a href="api#illustration"><code>Illustration</code></a> is the top-level class that handles dealing with the <code>&lt;canvas></code> or <code>&lt;svg></code> element, holding all the shapes in the scene, and displaying those shapes in the element. We set the rendering HTML element by setting <a href="api#illustration-element"><code>element</code></a> to its matching selector <code>'.zdog-canvas'</code>. The <code>Illustration</code> instance is then set as a variable <code>illo</code>.</p>

<p><a href="shapes#ellipse"><code>Ellipse</code></a> is a shape class. We added it to the scene with <a href="api#anchor-addto"><code>addTo: illo</code></a>. So the circle shape is a child of <code>illo</code> â€” part of it&rsquo;s descendant <em>graph</em>. We set other properties for the circle to set its size, shape, and color: <code>diameter: 80, stroke: 20, color: '#636'.</code></p>

<p>Finally, to display the scene, we call <a href="api#illustration-updaterendergraph"><code>illo.updateRenderGraph()</code></a> to update all the display properties, then render shapes on to the element.</p>

<p>And we get ... a 80px wide purple circle. Exciting!</p>

{{! --------------------------------------------- }}

<h2>Animating</h2>

<p>To animate our scene we need to re-render <code>illo</code> every frame.</p>

<div class="example">
  <div class="example__code">
    ``` js
    function animate() {
      // rotate illo each frame
      illo.rotate.y += 0.03;
      illo.updateRenderGraph();
      // animate next frame
      requestAnimationFrame( animate );
    }
    // start animation
    animate();
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="starterInitial" data-spin="true"
        class="illo illo--no-drag" width="240" height="240"></canvas>
    {{> edit-demo penSlug="YbrLvO"}}
  </div>
</div>

<p>So we wrap <code>illo.updateRenderGraph()</code> within a <code>requestAnimationFrame</code> loop. Now we can manipulate the scene and see its changes animated. We change the rotation of the scene by incrementally increasing <code>illo.rotate.y</code>.</p>

<p>And now the animated circle is ... kind of lame. It <em>is</em> rotating, but being all alone and sitting in direct center, the visual effect is weak. Let's add another shape, a <a href="shapes#rect"><code>Rect</code></a>, and position the shapes in 3D space.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // circle
    new Zdog.Ellipse({
      addTo: illo,
      diameter: 80,
      // position closer
      translate: { z: 40 },
      stroke: 20,
      color: '#636',
    });

    // square
    new Zdog.Rect({
      addTo: illo,
      width: 80,
      height: 80,
      // position further back
      translate: { z: -40 },
      stroke: 12,
      color: '#E62',
      fill: true,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="starterRect"
        class="illo illo--no-drag" width="240" height="240"></canvas>
    {{> edit-demo penSlug="vwejaQ"}}
  </div>
</div>

<p>Now we're cooking. The shapes are positioned by setting <a href="api#anchor-translate"><code>translate</code></a>. The circle has <code>translate: { z: 40 }</code>, so its original position is moved 40 pixels closer up front. The square is 40 pixels further back. The shapes are separated from another so, when rotating, they orbit around the center.</p>

{{! --------------------------------------------- }}

<h2>Zoom</h2>

<p>Zdog requires setting lots of numbers. I like to keep my numbers smaller. Setting <a href="api#illustration-zoom"><code>zoom</code></a> will scale the whole scene proportionally.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const illo = new Zdog.Illustration({
      element: '.zdog-canvas',
      // zoom up 4x
      zoom: 4,
    });

    new Zdog.Ellipse({
      diameter: 20,
      translate: { z: 10 },
      stroke: 5,
      ...
    });

    new Zdog.Rect({
      width: 20,
      height: 20,
      translate: { z: -10 },
      stroke: 3,
      ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="starterZoom"
        class="illo illo--no-drag" width="240" height="240"></canvas>
    {{> edit-demo penSlug="qGPYMo"}}
  </div>
</div>

{{! --------------------------------------------- }}

<h2>Drag rotate</h2>

<p>Enable rotation with dragging by setting <code>dragRotate: true</code> on the <code>Illustration</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    const illo = new Zdog.Illustration({
      element: '.zdog-canvas',
      zoom: 4,
      // enable rotating scene with dragging
      dragRotate: true,
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="starterDragRotate"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="EzwLdw"}}
  </div>
</div>

<p>We can add back the regular rotation and stop it for dragging with <code>onDragStart</code>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // rotating flag variable
    let isSpinning = true;

    const illo = new Zdog.Illustration({
      element: '.zdog-canvas',
      zoom: 4,
      dragRotate: true,
      // stop rotation when dragging starts
      onDragStart: function() {
        isSpinning = false;
      },
    });

    // add shapes...

    function animate() {
      // rotate
      if ( isSpinning ) {
        illo.rotate.y += 0.03;
      }
      illo.updateRenderGraph();
      requestAnimationFrame( animate );
    }
    animate();
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="starterDragRotate" data-spin="true"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="YbrLaO"}}
  </div>
</div>

<p>That covers the basics of displaying a 3D model with Zdog. Now you&rsquo;re ready to learn more about Zdog <a href="modeling">modeling</a> and <a href="shapes">shapes</a>.</p>

